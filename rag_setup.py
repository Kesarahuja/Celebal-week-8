import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

class RAGSystem:
    def __init__(self, documentation_path, training_data_path):
        self.documentation = self._load_documentation(documentation_path)
        self.training_data = pd.read_csv(training_data_path)
        self.vectorizer = TfidfVectorizer()
        self.documents = self._prepare_documents()
        self.document_embeddings = self.vectorizer.fit_transform(self.documents)

    def _load_documentation(self, path):
        with open(path, "r") as f:
            return f.read()

    def _prepare_documents(self):
        docs = [self.documentation]
        # Add rows from training data as documents
        for index, row in self.training_data.iterrows():
            doc_text = f"Loan Application ID: {row['Loan_ID']}\n"
            for col in self.training_data.columns:
                if col != "Loan_ID":
                    doc_text += f"{col}: {row[col]}\n"
            docs.append(doc_text)
        return docs

    def retrieve_documents(self, query, top_k=3):
        query_embedding = self.vectorizer.transform([query])
        similarities = cosine_similarity(query_embedding, self.document_embeddings)[0]
        top_indices = similarities.argsort()[-top_k:][::-1]
        return [self.documents[i] for i in top_indices]

    def generate_response(self, query, retrieved_docs):
        context = "\n\n".join(retrieved_docs)
        # This is a placeholder for LLM interaction. In a real scenario, you\'d send this to an LLM.
        # For now, we\'ll just return the context and the query.
        return f"Query: {query}\n\nContext:\n{context}\n\n(Response would be generated by an LLM based on the context)"

if __name__ == "__main__":
    rag_system = RAGSystem("loan_data_documentation.md", "/home/ubuntu/upload/TrainingDataset.csv")
    print("RAG System initialized. Number of documents:", len(rag_system.documents))
    print("First document (documentation):\n", rag_system.documents[0][:500]) # Print first 500 chars
    print("First loan application document:\n", rag_system.documents[1])

    # Example query
    query = "What is the loan status for LP001003?"
    retrieved_docs = rag_system.retrieve_documents(query)
    print("\nRetrieved Documents:")
    for doc in retrieved_docs:
        print("\n---")
        print(doc[:200]) # Print first 200 chars of each retrieved doc

    response = rag_system.generate_response(query, retrieved_docs)
    print("\nGenerated Response:")
    print(response)


